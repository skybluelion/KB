import java.io.*;
import java.util.StringTokenizer;

public class Main {
	static int[] A;
	static int[] temp;
	static int cnt,K;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		int N = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		temp = new int[N];
		A = new int[N];
		st = new StringTokenizer(br.readLine());
		for (int i = 0; i < N; i++) {
			A[i] = Integer.parseInt(st.nextToken());
		}
		cnt = 0;
		mergeSort(0,A.length-1);
		
		bw.write(cnt+"");
		
		
		bw.flush();
		bw.close();
		br.close();
	}//main
	private static void mergeSort(int left, int right) {
		if(cnt==K) return;
		cnt++;
		
		if(left>=right) {
			cnt=-1;
			return;
		}
		int center = (left+right) / 2;
		
		mergeSort(left, center);
		mergeSort(center+1, right);
		
		for (int i = left; i <= right; i++) {
			temp[i]=A[i];
		}
		
		int currIdx = left;
		int leftIdx = left;
		int rightIdx = center+1;
		
		while (leftIdx <= center && rightIdx <= right) {
            if (temp[leftIdx] < temp[rightIdx]) {
                A[currIdx++] = temp[leftIdx++];
            } else {
                A[currIdx++] = temp[rightIdx++];
            }
        }
		
		//남아있는 값 처리
		while (leftIdx <= center) {
			A[currIdx++] = temp[leftIdx++];
		}
		while (rightIdx <= right) {
			A[currIdx++] = temp[rightIdx++];
		}
		
	}
}//class